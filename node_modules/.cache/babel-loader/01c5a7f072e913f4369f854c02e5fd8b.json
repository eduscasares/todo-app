{"ast":null,"code":"var _jsxFileName = \"/Users/eduardosanchez/Projects/open-bootcamp/ReactJS/redux-todo-app/src/components/pure/forms/TaskForm.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // Importing MODELS \n\nimport { Task } from '../../../models/taskModel.class';\nimport { LEVELS } from '../../../models/levels.enum'; // Importing Formik and Yup\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskForm = _ref => {\n  let {\n    add,\n    length,\n    visibility\n  } = _ref;\n  // Setting Form initial values\n  const initialValues = {\n    name: '',\n    description: '',\n    level: LEVELS.NORMAL,\n    completed: false\n  }; // Setting Form validation\n\n  const addTaskSchema = Yup.object().shape({\n    name: Yup.string().required('This field is required, please fill it'),\n    description: Yup.string().required('This field is required, please fill it'),\n    level: Yup.string().oneOf([LEVELS.NORMAL, LEVELS.URGENT, LEVELS.BLOCKING])\n  }); // Functionality to add task\n\n  function addTask(tasks) {\n    const newTask = tasks;\n    add(newTask);\n    visibility = !visibility;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: visibility ? 'task-form hidden' : 'task-form',\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Add a new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: addTaskSchema,\n      onSubmit: (values, actions) => {\n        addTask(values);\n        actions.resetForm({});\n        actions.setSubmitting(false);\n      },\n      children: _ref2 => {\n        let {\n          errors,\n          touched,\n          isSubmitting\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            placeholder: \"Add a task name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), errors.name && touched.name && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"name\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"description\",\n            name: \"description\",\n            placeholder: \"Add a task description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), errors.description && touched.description && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"description\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"level\",\n            children: \"Priority\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: \"select\",\n            id: \"level\",\n            name: \"level\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: LEVELS.NORMAL,\n              children: \"Normal\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: LEVELS.URGENT,\n              children: \"Urgent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: LEVELS.BLOCKING,\n              children: \"Blocking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"contained-button\",\n            children: length === 0 ? 'Create your first task' : 'Add a new task'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this), isSubmitting ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Be patient, we're adding your task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 47\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_c = TaskForm;\nTaskForm.ProtoTypes = {\n  tasks: PropTypes.instanceOf(Task),\n  add: PropTypes.func.isRequired,\n  length: PropTypes.number.isRequired\n};\nexport default TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","PropTypes","Task","LEVELS","Formik","Form","Field","ErrorMessage","Yup","TaskForm","add","length","visibility","initialValues","name","description","level","NORMAL","completed","addTaskSchema","object","shape","string","required","oneOf","URGENT","BLOCKING","addTask","tasks","newTask","values","actions","resetForm","setSubmitting","errors","touched","isSubmitting","ProtoTypes","instanceOf","func","isRequired","number"],"sources":["/Users/eduardosanchez/Projects/open-bootcamp/ReactJS/redux-todo-app/src/components/pure/forms/TaskForm.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Importing MODELS \nimport { Task } from '../../../models/taskModel.class';\nimport { LEVELS } from '../../../models/levels.enum';\n\n// Importing Formik and Yup\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\n\nconst TaskForm = ({ add, length, visibility }) => {\n\n    // Setting Form initial values\n    const initialValues = {\n        name: '',\n        description: '',\n        level: LEVELS.NORMAL,\n        completed: false\n    }\n\n    // Setting Form validation\n    const addTaskSchema = Yup.object().shape(\n        {\n            name: Yup.string()\n                .required('This field is required, please fill it'),\n            description: Yup.string()\n                .required('This field is required, please fill it'),\n            level: Yup.string().oneOf(\n                [LEVELS.NORMAL, LEVELS.URGENT, LEVELS.BLOCKING]\n            ),\n        }\n    )\n\n    // Functionality to add task\n\n    function addTask(tasks) {\n        const newTask = tasks;\n        add(newTask);\n        visibility = !visibility;\n    }\n\n    return (\n        <div className={ visibility ? 'task-form hidden' : 'task-form'} >\n            <h4>Add a new task</h4>\n\n            <Formik\n                initialValues = { initialValues }\n                validationSchema = { addTaskSchema }\n                onSubmit = { (values, actions) => {\n                    addTask(values);\n                    actions.resetForm({});\n                    actions.setSubmitting(false);\n                } }\n            >\n\n                {({ errors,\n                    touched, \n                    isSubmitting }) => (\n\n                        <Form>\n\n                            <label htmlFor=\"name\">Name</label>\n                            <Field type=\"text\" id=\"name\" name=\"name\" placeholder=\"Add a task name\"></Field>\n                            {/* Setting Field Errors */}\n                                {\n\n                                    errors.name && touched.name &&\n                                    (\n                                        <ErrorMessage name=\"name\" component=\"div\" />\n                                    )\n\n                                }\n\n                            <label htmlFor=\"description\">Description</label>\n                            <Field type=\"text\" id=\"description\" name=\"description\" placeholder=\"Add a task description\"></Field>\n                            {/* Setting Field Errors */}\n                                {\n\n                                    errors.description && touched.description &&\n                                    (\n                                        <ErrorMessage name='description' component='div'></ErrorMessage>\n                                    )\n\n                                }\n\n                            <label htmlFor=\"level\">Priority</label>\n                            <Field as='select' id=\"level\" name=\"level\">\n                                <option value={ LEVELS.NORMAL }>Normal</option>\n                                <option value={ LEVELS.URGENT }>Urgent</option>\n                                <option value={ LEVELS.BLOCKING }>Blocking</option>\n                            </Field>\n\n                            <button type=\"submit\" className='contained-button'>\n                                { length === 0 ? 'Create your first task' : 'Add a new task'}\n                            </button>\n\n                            { isSubmitting ? (<p>Be patient, we're adding your task</p>) : null }\n\n                        </Form>\n\n                    )\n                }\n\n\n            </Formik>\n        </div>\n    );\n}\n\nTaskForm.ProtoTypes = {\n    tasks: PropTypes.instanceOf(Task),\n    add: PropTypes.func.isRequired,\n    length: PropTypes.number.isRequired,\n}\n\nexport default TaskForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}